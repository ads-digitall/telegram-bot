from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.interval import IntervalTrigger
from apscheduler.triggers.cron import CronTrigger
from core.config import settings
from modules.bot.services.post_service import send_posts
from modules.bot.services.user_service import update_user_interests
from modules.bot.services.post_cache_service import clean_cache
from core.database import get_database
from error_handler import handle_error
from sqlalchemy.future import select
from core.database.models import Channel, PremiumUser
from modules.monitoring.inactivity_monitor import check_inactive_users

from aiogram import Bot
from modules.profile.config import TELEGRAM_PROFILE_TOKEN

import logging
import asyncio

logger = logging.getLogger("scheduler")

scheduler = AsyncIOScheduler()

async def start_scheduler():
    try:
        scheduler_interval = settings.SCHEDULER_INTERVAL_HOURS

        scheduler.add_job(
            update_interests_for_all_users,
            IntervalTrigger(days=1),
        )

        scheduler.add_job(
            periodic_task,
            IntervalTrigger(hours=scheduler_interval),
        )

        scheduler.add_job(
            clean_cache,
            IntervalTrigger(minutes=5),
        )

        scheduler.add_job(
            check_inactive_users,
            IntervalTrigger(minutes=10),
        )

        scheduler.add_job(
            reset_channel_limits,
            CronTrigger(day=1, hour=0, minute=0),
        )

        scheduler.add_job(
            check_channel_limits,
            IntervalTrigger(hours=6),  # üîÑ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        )

        scheduler.start()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")

    except Exception as e:
        handle_error(e, "SchedulerStartup", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")

async def periodic_task():
    try:
        async for session in get_database():
            users = await session.execute("SELECT user_id FROM users WHERE is_active = 1")
            users = users.fetchall()
            break

        for row in users:
            user_id = row[0]
            try:
                await send_posts(user_id)
            except Exception as e:
                handle_error(e, "PostDispatch", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ—Å—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        handle_error(e, "PeriodicTask", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ —Ä–∞—Å—Å—ã–ª–∫–∏")

async def update_interests_for_all_users():
    try:
        await update_user_interests()
    except Exception as e:
        handle_error(e, "UpdateInterests", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤")

async def reset_channel_limits():
    try:
        async for session in get_database():
            result = await session.execute(select(Channel))
            channels = result.scalars().all()
            for channel in channels:
                channel.monthly_views_left = channel.monthly_limit
            await session.commit()

        logger.info("üîÅ –ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –ª–∏–º–∏—Ç—ã –∫–∞–Ω–∞–ª–æ–≤ —Å–±—Ä–æ—à–µ–Ω—ã.")
    except Exception as e:
        handle_error(e, "ResetLimits", "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤: {e}")

async def check_channel_limits():
    try:
        bot = Bot(token=TELEGRAM_PROFILE_TOKEN)
        async for session in get_database():
            result = await session.execute(select(Channel))
            channels = result.scalars().all()

            for channel in channels:
                if channel.monthly_views_left is not None and channel.monthly_views_left < 100:
                    admins = channel.admin_user_ids or []
                    for admin_id in admins:
                        try:
                            await bot.send_message(
                                chat_id=admin_id,
                                text=(
                                    f"üìä <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ</b>\n\n"
                                    f"–£ –∫–∞–Ω–∞–ª–∞ <b>{channel.channel_name}</b> –æ—Å—Ç–∞–ª–æ—Å—å "
                                    f"<b>{channel.monthly_views_left}</b> –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–∫–∞–∑–æ–≤.\n\n"
                                    f"–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—è–≤–ª—è—Ç—å—Å—è –≤ –ª–µ–Ω—Ç–µ, –≤—ã –º–æ–∂–µ—Ç–µ:\n"
                                    f"‚Äî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–µ–º–∏—É–º\n"
                                    f"‚Äî –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∫–µ\n\n"
                                    f"<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b> /profile"
                                ),
                                parse_mode="HTML"
                            )
                        except Exception as err:
                            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {err}")

    except Exception as e:
        handle_error(e, "CheckChannelLimits", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤ –∫–∞–Ω–∞–ª–æ–≤: {e}")
