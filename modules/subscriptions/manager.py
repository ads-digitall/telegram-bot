"""
manager.py

SubscriptionManager ‚Äî –∫–ª–∞—Å—Å, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –ª–æ–≥–∏–∫—É –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ callback.py, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Redis –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—á–µ—Ä–µ–∑ crud).
–î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
"""

from aiogram.types import Message
from core.logger import get_logger
from core.database import get_database
from core.database.crud import user_crud
from core.redis import get_redis_client
from error_handler import handle_error  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫

logger = get_logger(__name__)

class SubscriptionManager:
    def __init__(self):
        self.redis = None

    async def setup(self):
        """
        –û—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ).
        """
        try:
            self.redis = await get_redis_client()
            logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis: {e}")
            handle_error(e, "SubscriptionManager", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Redis")
            raise

    async def subscribe_user(self, user_id: int) -> bool:
        """
        –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            async for db in get_database():
                await user_crud.update(db, user_id, {"subscription_status": "subscribed"})
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω.")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            handle_error(e, "SubscriptionManager", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False

    async def unsubscribe_user(self, user_id: int) -> bool:
        """
        –û—Ç–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            async for db in get_database():
                await user_crud.update(db, user_id, {"subscription_status": "unsubscribed"})
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø–∏—Å–∞–Ω.")
                return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            handle_error(e, "SubscriptionManager", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return False

    async def get_subscription_status(self, user_id: int) -> str:
        """
        –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            async for db in get_database():
                user = await user_crud.get(db, user_id)
                if user:
                    return user.subscription_status or "unsubscribed"
            return "unsubscribed"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            handle_error(e, "SubscriptionManager", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return "unsubscribed"

    async def toggle_subscription(self, user_id: int) -> str:
        """
        –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        try:
            current_status = await self.get_subscription_status(user_id)
            if current_status == "subscribed":
                await self.unsubscribe_user(user_id)
                return "unsubscribed"
            else:
                await self.subscribe_user(user_id)
                return "subscribed"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            handle_error(e, "SubscriptionManager", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            return "error"

    async def handle_callback(self, callback_data: dict, message: Message):
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç Telegram-–∫–Ω–æ–ø–∫–∏.
        –ù–∞–ø—Ä–∏–º–µ—Ä: {'action': 'subscribe', 'user_id': 12345}
        """
        try:
            action = callback_data.get("action")
            user_id = int(callback_data.get("user_id", 0))

            if action == "subscribe":
                result = await self.subscribe_user(user_id)
                if result:
                    await message.answer("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å.")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif action == "unsubscribe":
                result = await self.unsubscribe_user(user_id)
                if result:
                    await message.answer("üì≠ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å.")
                else:
                    await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            elif action == "toggle":
                new_status = await self.toggle_subscription(user_id)
                if new_status == "subscribed":
                    await message.answer("üîî –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞.")
                elif new_status == "unsubscribed":
                    await message.answer("üîï –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.")
                else:
                    await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.")
            else:
                await message.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")
            handle_error(e, "SubscriptionManager", "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            

# –î–ª—è –∞–≤—Ç–æ–¥–∏—Å–∫–∞–≤–µ—Ä–∞:
def register_handler(dp):
    dp.include_router(router)
