"""
fsm_handlers.py

–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ FSM-—Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
- –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç FSMManager –∏ FSMStates –∏–∑ fsm_config.py.
"""

from aiogram import types, Router, F
from core.logger import get_logger
from modules.fsm_manager import set_state, get_state, reset_state
from modules.bot.fsm.fsm_config import ExtendedFSM
from modules.bot.services.settings_service import (
    update_user_language,
    update_user_interests,
    set_user_notifications
)

logger = get_logger(__name__)
router = Router()

# ---------- –Ø–ó–´–ö ----------

async def prompt_language(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —è–∑—ã–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ru, en):")
    await set_state(message.from_user.id, ExtendedFSM.SETTINGS_LANGUAGE_INPUT)

async def set_language_from_input(message: types.Message):
    lang = message.text.strip().lower()
    await update_user_language(message.from_user.id, lang)
    await message.answer(f"–Ø–∑—ã–∫ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {lang}")
    await reset_state(message.from_user.id)

# ---------- –ò–ù–¢–ï–†–ï–°–´ ----------

async def prompt_tags(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Å–ø–æ—Ä—Ç, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–∏–Ω–æ):")
    await set_state(message.from_user.id, ExtendedFSM.SETTINGS_INTERESTS_INPUT)

async def set_tags_from_input(message: types.Message):
    tags = message.text.strip()
    await update_user_interests(message.from_user.id, tags)
    await message.answer(f"–ò–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {tags}")
    await reset_state(message.from_user.id)

# ---------- –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ----------

async def toggle_notifications(message: types.Message):
    await message.answer("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω—ã (–¥–ª—è –ø—Ä–∏–º–µ—Ä–∞).")
    await set_user_notifications(message.from_user.id, True)  # –∏–ª–∏ False ‚Äî –∑–∞–≤–∏—Å–∏—Ç –æ—Ç UI
    await reset_state(message.from_user.id)

# ---------- –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø FSM-–ú–ê–†–®–†–£–¢–ò–ó–ê–¶–ò–Ø ----------

async def process_fsm_input(message: types.Message):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö.
    """
    user_id = message.from_user.id
    state = await get_state(user_id)

    if state == ExtendedFSM.SETTINGS_LANGUAGE_INPUT:
        await set_language_from_input(message)
    elif state == ExtendedFSM.SETTINGS_INTERESTS_INPUT:
        await set_tags_from_input(message)
    else:
        await message.answer("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start.")
        await reset_state(user_id)

# ---------- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ----------

@router.message(F.text == "üåê –Ø–∑—ã–∫")
async def handle_prompt_language(message: types.Message):
    await prompt_language(message)

@router.message(F.text == "üìã –ò–Ω—Ç–µ—Ä–µ—Å—ã")
async def handle_prompt_tags(message: types.Message):
    await prompt_tags(message)

@router.message(F.text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def handle_toggle_notifications(message: types.Message):
    await toggle_notifications(message)

@router.message()
async def handle_process_fsm_input(message: types.Message):
    await process_fsm_input(message)

def register_handler(dp):
    dp.include_router(router)
