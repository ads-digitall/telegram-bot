"""
activity.py

–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –ª—é–±–æ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏,
–∫—Ä–æ–º–µ /start –∏ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é ‚Äî —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å –¥—Ä—É–≥–∏–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.
–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫.
–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ—Å—Ç–æ–≤.
"""

from aiogram import Router, types, F
from core.logger import get_logger
from modules.bot.services.user_service import update_user_activity
from error_handler import handle_error
from modules.bot.services.post_service import update_post_activity

logger = get_logger(__name__)
router = Router()

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û —Ç–µ–∫—Å—Ç, –ù–ï –∫–æ–º–∞–Ω–¥—ã, –ù–ï –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
@router.message(
    F.text & 
    ~F.text.in_({"/start", "üì¢ –õ–µ–Ω—Ç–∞", "üì° –ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏", "‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å"})
)
async def update_activity_handler(message: types.Message) -> None:
    try:
        await update_user_activity(message)
        logger.debug(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

        if message.text.startswith("https://"):
            post_id = extract_post_id_from_link(message.text)
            if post_id:
                await update_post_activity(post_id, "view")
                logger.debug(f"–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (–ø—Ä–æ—Å–º–æ—Ç—Ä).")

    except Exception as e:
        handle_error(e, "ActivityHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–∞—à–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_exception:
            handle_error(inner_exception, "ActivityHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –ø–æ—Å—Ç–∞ –∏–∑ URL (–ø—Ä–∏–º–µ—Ä–Ω–∞—è)
def extract_post_id_from_link(url: str) -> int:
    if "/post/" in url:
        try:
            post_id = int(url.split("/post/")[1])
            return post_id
        except ValueError:
            return None
    return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∞–∫—Ü–∏–π –Ω–∞ –ø–æ—Å—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–∞–π–∫–∏, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏)
@router.message(
    F.text.in_({"üëç", "‚ù§Ô∏è", "üí¨"})
)
async def update_reactions_handler(message: types.Message) -> None:
    try:
        post_id = extract_post_id_from_link(message.text)
        if post_id:
            await update_post_activity(post_id, "reaction")
            logger.debug(f"–†–µ–∞–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ä–µ–∞–∫—Ü–∏—è).")
    except Exception as e:
        handle_error(e, "ReactionHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–π —Ä–µ–∞–∫—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_exception:
            handle_error(inner_exception, "ReactionHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
@router.message(
    F.text.contains("https://")
)
async def update_clicks_handler(message: types.Message) -> None:
    try:
        post_id = extract_post_id_from_link(message.text)
        if post_id:
            await update_post_activity(post_id, "click")
            logger.debug(f"–ö–ª–∏–∫ –¥–ª—è –ø–æ—Å—Ç–∞ {post_id} –æ–±–Ω–æ–≤–ª–µ–Ω (–∫–ª–∏–∫).")
    except Exception as e:
        handle_error(e, "ClickHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
        try:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∫–ª–∏–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_exception:
            handle_error(inner_exception, "ClickHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")

def register_handler(dp):
    dp.include_router(router)
