"""
channel_buttons.py

–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏ "üì° –ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏"
"""

from aiogram import Router, types, F
from sqlalchemy import select
from core.logger import get_logger
from modules.bot.services.post_service import send_posts
from error_handler import handle_error
from core.database import get_database
from core.database.models import UserState

logger = get_logger(__name__)
router = Router()

@router.message(F.text == "üì° –ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏")
async def handle_channels_news(message: types.Message) -> None:
    try:
        logger.info(f"‚ñ∂Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª '–ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏'")

        async for session in get_database():
            result = await session.execute(select(UserState).where(UserState.user_id == message.from_user.id))
            user_state = result.scalars().first()
            if user_state:
                user_state.last_read_post_id = None
                await session.commit()
            break

        await send_posts(message)

    except Exception as e:
        handle_error(e, "ChannelButtons", f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ '–ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏' –¥–ª—è {message.from_user.id}")
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ '–ö–∞–Ω–∞–ª—ã –ù–æ–≤–æ—Å—Ç–∏' –¥–ª—è {message.from_user.id}: {e}")
        try:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        except Exception as inner_exception:
            handle_error(inner_exception, "ChannelButtons", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—à–∏–±–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {inner_exception}")

def register_handler(dp):
    dp.include_router(router)
