from aiogram import types
from sqlalchemy import text

from core.logger import get_logger
from core.database import get_database
from modules.bot.utils.bot_instance import get_bot
from core.database.models import User  # ‚úÖ –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫

logger = get_logger(__name__)


async def process_bot_added_to_channel(event: types.ChatMemberUpdated):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª.
    """
    channel_id = event.chat.id
    channel_name = event.chat.title
    username = event.chat.username
    channel_link = f"https://t.me/{username}" if username else "–°—Å—ã–ª–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    async for db in get_database():
        await db.execute(
            text("""
                INSERT INTO channels (channel_id, channel_name, channel_link)
                VALUES (:id, :name, :link)
                ON CONFLICT (channel_id) DO NOTHING
            """),
            {"id": channel_id, "name": channel_name, "link": channel_link}
        )
        await db.commit()
        break

    logger.info(f"‚úÖ –ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª: {channel_name} ({channel_link})")


async def save_new_post(channel_id: int, message_id: int, post_date: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –ø–æ—Å—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    """
    async for db in get_database():
        await db.execute(
            text("""
                INSERT INTO posts (channel_id, message_id, date)
                VALUES (:channel_id, :message_id, :post_date)
                ON CONFLICT DO NOTHING
            """),
            {"channel_id": channel_id, "message_id": message_id, "post_date": post_date}
        )
        await db.commit()
        break

    logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ—Å—Ç {message_id} –∏–∑ –∫–∞–Ω–∞–ª–∞ {channel_id} –æ—Ç {post_date}")


# ‚úÖ –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏

async def add_user_subscription(user_id: int, channel_id: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫–∞–Ω–∞–ª –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    async for db in get_database():
        user = await db.get(User, user_id)
        if user:
            if not user.subscribed_channels:
                user.subscribed_channels = []
            if channel_id not in user.subscribed_channels:
                user.subscribed_channels.append(channel_id)
                await db.commit()
                logger.info(f"‚ûï –ö–∞–Ω–∞–ª {channel_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        break


async def remove_user_subscription(user_id: int, channel_id: int):
    """
    –£–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    async for db in get_database():
        user = await db.get(User, user_id)
        if user and user.subscribed_channels and channel_id in user.subscribed_channels:
            user.subscribed_channels.remove(channel_id)
            await db.commit()
            logger.info(f"‚ûñ –ö–∞–Ω–∞–ª {channel_id} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        break


async def get_user_channels(user_id: int, bot):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –∫–æ—Ç–æ—Ä—ã–º–∏ —É–ø—Ä–∞–≤–ª—è–µ—Ç.
    """
    subscribed_channels = []
    managed_channels = []

    async for db in get_database():
        result = await db.execute(text("SELECT channel_id, channel_name, channel_link FROM channels"))
        channels = result.fetchall()

        for channel in channels:
            channel_id = channel.channel_id
            try:
                member = await bot.get_chat_member(chat_id=channel_id, user_id=user_id)
                status = member.status

                if status in ["member", "administrator", "creator"]:
                    subscribed_channels.append(channel)

                if status in ["administrator", "creator"]:
                    managed_channels.append(channel)

            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ –∫–∞–Ω–∞–ª–µ {channel_id}: {e}")
                continue

        break

    return subscribed_channels, managed_channels
