import logging
import html
from aiogram import types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.markdown import hbold

from core.database.models import User
from modules.bot.services.channel_service import get_user_channels
from modules.bot.services.subscription_service import update_user_subscriptions
from core.database.database import get_async_session
from aiogram import Router
from error_handler import handle_error
from modules.bot.services.subscription_service import is_user_premium

logger = logging.getLogger(__name__)
router = Router()

async def build_user_profile(user_id: int, username: str, bot):
    async with get_async_session() as session:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await update_user_subscriptions(user_id, bot)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
        user = await session.get(User, user_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º
        is_premium = await is_user_premium(user_id, bot)

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        subscribed_channels, managed_channels = await get_user_channels(user_id, bot)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
        text = (
            f"<b>üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n"
            f"{hbold('üÜî ID')}: <code>{user.user_id}</code>\n"
            f"{hbold('üîª Username')}: @{username}\n"
            f"üê≠ –ü–æ–¥–ø–∏—Å–∞–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(subscribed_channels)}\n"
            f"üíé –ü—Ä–µ–º–∏—É–º: {'‚úÖ –î–∞' if is_premium else '‚ùå –ù–µ—Ç'}\n"
            f"üí† –ü—Ä–µ–º–∏—É–º-–ø–æ–∫–∞–∑–æ–≤: {user.premium_views}\n"
            f"üéØ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –ø–æ–∫–∞–∑–æ–≤: {user.referral_bonus_views}\n\n"
        )

        text += "<b>üê≠ –ü–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        if subscribed_channels:
            for ch in subscribed_channels:
                name = html.escape(ch.channel_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                link = f"{ch.channel_link}" if ch.channel_link else "-"
                text += f"‚Ä¢ {name} ({link})\n"
        else:
            text += "‚Ä¢ –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫\n"

        text += "\n<b>üëë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
        if managed_channels:
            for ch in managed_channels:
                name = html.escape(ch.channel_name or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
                link = f"{ch.channel_link}" if ch.channel_link else "-"
                text += f"‚Ä¢ {name} ({link})\n"
        else:
            text += "‚Ä¢ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º\n"

        # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
        text += (
            "\n<b>üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>\n"
            "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: 0\n"
            f"–°—Å—ã–ª–∫–∞: https://t.me/lenta_feed_bot?start=ref_{user.user_id}\n"
        )

        # –§–∏–Ω–∞–ª—å–Ω—ã–π –±–ª–æ–∫ —Å –ø–æ—è—Å–Ω–µ–Ω–∏–µ–º
        text += (
            "\nüéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å +10 –ø–æ–∫–∞–∑–æ–≤ –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ.\n"
            "üì¢ –ß—Ç–æ–±—ã –≤–∞—à –∫–∞–Ω–∞–ª –ø–æ—è–≤–∏–ª—Å—è –≤ –ª–µ–Ω—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ –¥–≤—É—Ö –±–æ—Ç–æ–≤:\n"
            "@Lenta_food_bot –∏ @lenta_profile_bot\n"
        )

        # –ö–Ω–æ–ø–∫–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã", callback_data="refresh_profile")],
            [InlineKeyboardButton(text="üíé Plus-–ø–æ–¥–ø–∏—Å–∫–∞", url="https://t.me/tribute/app?startapp=ssC9")],
            [InlineKeyboardButton(text="üì£ –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–∞—Ö", callback_data="promote_channel")],
        ])

        return text, keyboard


@router.callback_query(lambda c: c.data == "refresh_profile")
async def handle_refresh_profile(callback: types.CallbackQuery):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "üîÑ –û–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã"
    """
    user_id = callback.from_user.id
    username = callback.from_user.username
    bot = callback.bot

    try:
        text, keyboard = await build_user_profile(user_id, username, bot)
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    except Exception as e:
        handle_error(e, "ProfileHandler", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.", show_alert=True)
