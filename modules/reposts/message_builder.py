"""
message_builder.py

–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è —Ä–µ–ø–æ—Å—Ç–∞:
- —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞
- –≥–µ–Ω–µ—Ä–∞—Ü–∏—è inline-–∫–Ω–æ–ø–æ–∫
- —à–∞–±–ª–æ–Ω—ã –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è

–í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ delivery.py, –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Telegram API –Ω–∞–ø—Ä—è–º—É—é.
"""

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Optional
from modules.common.utils import truncate

MAX_CONTENT_LENGTH = 500  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è


def build_post_text(post: dict) -> str:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è –¥–∞–Ω–Ω—ã—Ö.

    Args:
        post (dict): {
            "title": str,
            "content": str,
            "tag": str,
            "url": str,
        }

    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML-—Ç–µ–∫—Å—Ç –¥–ª—è Telegram
    """
    title = post.get("title", "")
    content = truncate(post.get("content", ""), MAX_CONTENT_LENGTH)
    tag = post.get("tag", "")
    url = post.get("url", "")

    text = f"üì¢ <b>{title}</b>\n\n{content}"
    if tag:
        text += f"\n\n#{tag}"
    if url:
        text += f"\n\nüîó <a href=\"{url}\">–ò—Å—Ç–æ—á–Ω–∏–∫</a>"

    return text


def build_post_buttons(post: dict) -> Optional[InlineKeyboardMarkup]:
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ—Å—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Å—ã–ª–∫–∞.

    Args:
        post (dict): —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª–µ–º 'url'

    Returns:
        InlineKeyboardMarkup | None: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –∏–ª–∏ None
    """
    url = post.get("url")
    if not url:
        return None

    button = InlineKeyboardButton(text="–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é", url=url)
    return InlineKeyboardMarkup(inline_keyboard=[[button]])
